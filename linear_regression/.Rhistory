install.packages(titanic)
install.packages("titanic")
install.packages("tidyverse")
options(digits = 3)    # report 3 significant digits
library(tidyverse)
library(titanic)
titanic <- titanic_train %>%
select(Survived, Pclass, Sex, Age, SibSp, Parch, Fare) %>%
mutate(Survived = factor(Survived),
Pclass = factor(Pclass),
Sex = factor(Sex))
# 1) Inspect the data and also use ?titanic_train to learn more about the variables in the dataset.
# Match these variables from the dataset to their variable type. There is at least one variable of each type (ordinal categorical, non-ordinal categorical, continuous, discrete).
?titanic_train
# 1) Inspect the data and also use ?titanic_train to learn more about the variables in the dataset.
# Match these variables from the dataset to their variable type. There is at least one variable of each type (ordinal categorical, non-ordinal categorical, continuous, discrete).
class(titanic_train)
# 1) Inspect the data and also use ?titanic_train to learn more about the variables in the dataset.
# Match these variables from the dataset to their variable type. There is at least one variable of each type (ordinal categorical, non-ordinal categorical, continuous, discrete).
class(Survived)
# 1) Inspect the data and also use ?titanic_train to learn more about the variables in the dataset.
# Match these variables from the dataset to their variable type. There is at least one variable of each type (ordinal categorical, non-ordinal categorical, continuous, discrete).
class(Survived)
# 1) Inspect the data and also use ?titanic_train to learn more about the variables in the dataset.
# Match these variables from the dataset to their variable type. There is at least one variable of each type (ordinal categorical, non-ordinal categorical, continuous, discrete).
class(titanic$Survived)
# 1) Inspect the data and also use ?titanic_train to learn more about the variables in the dataset.
# Match these variables from the dataset to their variable type. There is at least one variable of each type (ordinal categorical, non-ordinal categorical, continuous, discrete).
head(titanic)
# 1) Inspect the data and also use ?titanic_train to learn more about the variables in the dataset.
# Match these variables from the dataset to their variable type. There is at least one variable of each type (ordinal categorical, non-ordinal categorical, continuous, discrete).
head(titanic,15)
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
titanic %>% ggplot(aes(color = sex)) %>% geom_density()
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
titanic %>% ggplot(aes(age, color = sex)) %>% geom_density()
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
library(dplyr)
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
titanic %>% ggplot(aes(age, color = sex)) %>% geom_density()
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
titanic %>% ggplot(aes(age)) %>% geom_density()
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
titanic %>% ggplot(aes(age))# %>% geom_density()
head(titanic,15)
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
titanic %>% ggplot(aes(Age)) %>% geom_density()
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
titanic %>% ggplot(aes(titanic$Age)) %>% geom_density()
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
titanic %>% ggplot(aes(titanic$Age) %>% geom_density()
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
titanic %>% ggplot(aes(titanic$Age) + geom_density()
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
titanic %>% ggplot(aes(titanic$Age, color = sex) + geom_density()
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
titanic %>% ggplot(aes(Age, color = sex) + geom_density()
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
titanic %>% ggplot(aes(Age, color = sex) geom_density()
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
titanic %>% ggplot(aes(Age, color = sex)
geom_density()
geom_density()
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
titanic %>% ggplot(aes(Age, color = sex) +
titanic %>% ggplot(aes(Age, color = sex) +
geom_density()
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
titanic %>% ggplot(aes(Age, color = sex) + geom_density()
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
t <- titanic %>% ggplot(aes(Age, color = sex)
t + geom_density()
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
t <- titanic %>% ggplot(aes(Age, color = sex))
t + geom_density()
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
t <- titanic %>% ggplot(aes(Age, color = Sex))
t + geom_density()
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
titanic %>% ggplot(aes(Age, color = Sex)) + geom_density()
titanic %>% ggplot(aes(Age, color = Sex)) + geom_histogram()
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
titanic %>% ggplot(aes(Age, color = Sex)) + geom_density()
titanic %>% ggplot(aes(Age, color = Sex)) + geom_histogram()
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
titanic %>% ggplot(aes(Age, color = Sex)) + geom_density()
titanic %>% ggplot(aes(Age, color = Sex)) + geom_histogram()
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
titanic %>% ggplot(aes(Age, color = Sex)) + geom_density(y=..count..)
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
titanic %>% ggplot(aes(Age, color = Sex)) + geom_density()
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
titanic %>% ggplot(aes(Age, color = Sex)) + geom_density(y=..count..)
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
titanic %>% ggplot(aes(Age, color = Sex, y=..count..)) + geom_density()
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
titanic %>% ggplot(aes(Age, color = Sex, y=..count..)) + geom_density(alpha=0.2)
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
titanic %>% ggplot(aes(Age, color = Sex, y=..count.., alpha=0.2)) + geom_density(alpha=0.2)
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
titanic %>% ggplot(aes(Age, color = Sex, fill = Sex, y=..count..)) + geom_density()
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
titanic %>% ggplot(aes(Age, color = Sex, fill = Sex,alpha=0.2, y=..count..)) + geom_density()
## Females and males had the same general shape of age distribution.
## The age distribution was bimodal, with one mode around 25 years of age and a second smaller mode around 5 years of age.
## The count of males of age 40 was higher than the count of females of age 40.
titanic %>% ggplot(aes(Age, color = Sex)) + geom_density()
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
titanic %>% ggplot(aes(Age, color = Sex, fill = Sex, y=..count..)) + geom_density(alpha=0.2,) + facet_grid(Sex ~.)
# 2) Make density plots of age grouped by sex. Try experimenting with combinations of faceting, alpha blending, stacking and using variable counts on the y-axis to answer the following questions. Some questions may be easier to answer with different versions of the density plot.
titanic %>% ggplot(aes(Age, color = Sex)) + geom_density()
titanic %>% ggplot(aes(Age, color = Sex, fill = Sex, y=..count..)) + geom_density(alpha=0.2) + facet_grid(Sex ~.)
## The age distribution was bimodal, with one mode around 25 years of age and a second smaller mode around 5 years of age.
titanic %>% ggplot(aes(Age, color = Sex, fill = Sex, y=..count..)) + geom_density(alpha=0.2)
titanic %>% ggplot(aes(Age, color = Sex, fill = Sex, y=..count..)) + geom_density(alpha=0.2, position = "stack")
titanic %>% ggplot(aes(Age, color = Sex, fill = Sex, y=..count..)) + geom_density(alpha=0.2)
# 3) Use geom_qq() to make a QQ-plot of passenger age and add an identity line with geom_abline().
# Filter out any individuals with an age of NA first. Use the following object as the dparams argument in geom_qq():
params <- titanic %>%
filter(!is.na(Age)) %>%
summarize(mean = mean(Age), sd = sd(Age))
titanic %>% ggplot(aes(Age)) + geom_qq(dparams = params)
titanic %>% ggplot(aes(Age)) + geom_qq()
titanic %>% ggplot(aes(Age)) + geom_qq(dparams = params)
titanic %>% ggplot(aes(Age)) + geom_qq(p, dparams = params)
p <- seq(0.01, 0.99, 0.01)
titanic %>% ggplot(aes(Age)) + geom_qq(p, dparams = params)
quantile(data, p)
p <- seq(0.01, 0.99, 0.01)
quantile(titanic$Age, p)
quantile(params, p)
titanic %>% ggplot(aes(Age)) + geom_qq(quantile(params, p), dparams = params)
titanic %>%
filter(!is.na(Age)) %>%
ggplot(aes(sample = Age)) +
geom_qq(dparams = params) +
geom_abline()
# 4) To answer the following questions, make barplots of the Survived and Sex variables using geom_bar(). Try plotting one variable and filling by the other variable. You may want to try the default plot, then try adding position = position_dodge() to geom_bar() to make separate bars for each group.
titanic %>% ggplot(aes(Survived, color = Sex)) + geom_bar
# 4) To answer the following questions, make barplots of the Survived and Sex variables using geom_bar(). Try plotting one variable and filling by the other variable. You may want to try the default plot, then try adding position = position_dodge() to geom_bar() to make separate bars for each group.
titanic %>% ggplot(aes(Survived, color = Sex)) + geom_histogram()
# 4) To answer the following questions, make barplots of the Survived and Sex variables using geom_bar(). Try plotting one variable and filling by the other variable. You may want to try the default plot, then try adding position = position_dodge() to geom_bar() to make separate bars for each group.
titanic %>% ggplot(aes(Survived, color = Sex)) + geom_histogram(stat="count)
# 4) To answer the following questions, make barplots of the Survived and Sex variables using geom_bar(). Try plotting one variable and filling by the other variable. You may want to try the default plot, then try adding position = position_dodge() to geom_bar() to make separate bars for each group.
titanic %>% ggplot(aes(Survived)) + geom_histogram(stat="count)
# 4) To answer the following questions, make barplots of the Survived and Sex variables using geom_bar(). Try plotting one variable and filling by the other variable. You may want to try the default plot, then try adding position = position_dodge() to geom_bar() to make separate bars for each group.
titanic %>% ggplot(aes(Survived)) + geom_histogram()
# 4) To answer the following questions, make barplots of the Survived and Sex variables using geom_bar(). Try plotting one variable and filling by the other variable. You may want to try the default plot, then try adding position = position_dodge() to geom_bar() to make separate bars for each group.
titanic %>% ggplot(aes(Survived, Sex)) + geom_histogram()
# 4) To answer the following questions, make barplots of the Survived and Sex variables using geom_bar(). Try plotting one variable and filling by the other variable. You may want to try the default plot, then try adding position = position_dodge() to geom_bar() to make separate bars for each group.
titanic %>% ggplot(aes(Survived, Sex)) + geom_bar()
head(titanic,15)
# 4) To answer the following questions, make barplots of the Survived and Sex variables using geom_bar(). Try plotting one variable and filling by the other variable. You may want to try the default plot, then try adding position = position_dodge() to geom_bar() to make separate bars for each group.
titanic %>% ggplot(aes(Sex, count(Survived))) + geom_bar()
# 4) To answer the following questions, make barplots of the Survived and Sex variables using geom_bar(). Try plotting one variable and filling by the other variable. You may want to try the default plot, then try adding position = position_dodge() to geom_bar() to make separate bars for each group.
titanic %>% ggplot(aes(Sex, sum(Survived))) + geom_bar()
# 4) To answer the following questions, make barplots of the Survived and Sex variables using geom_bar(). Try plotting one variable and filling by the other variable. You may want to try the default plot, then try adding position = position_dodge() to geom_bar() to make separate bars for each group.
titanic %>% ggplot(aes(Sex)) + geom_bar()
# 4) To answer the following questions, make barplots of the Survived and Sex variables using geom_bar(). Try plotting one variable and filling by the other variable. You may want to try the default plot, then try adding position = position_dodge() to geom_bar() to make separate bars for each group.
titanic %>% ggplot(aes(Sex, color = Survived)) + geom_bar()
# 4) To answer the following questions, make barplots of the Survived and Sex variables using geom_bar(). Try plotting one variable and filling by the other variable. You may want to try the default plot, then try adding position = position_dodge() to geom_bar() to make separate bars for each group.
titanic %>% ggplot(aes(colour=Sex,Survived)) + geom_bar()
# 4) To answer the following questions, make barplots of the Survived and Sex variables using geom_bar(). Try plotting one variable and filling by the other variable. You may want to try the default plot, then try adding position = position_dodge() to geom_bar() to make separate bars for each group.
titanic %>% ggplot(aes(Survived, colour=Sex, fill = Sex)) + geom_bar()
# 4) To answer the following questions, make barplots of the Survived and Sex variables using geom_bar(). Try plotting one variable and filling by the other variable. You may want to try the default plot, then try adding position = position_dodge() to geom_bar() to make separate bars for each group.
titanic %>% ggplot(aes(Survived, colour=Sex, fill = Sex)) + geom_bar(position = "Stack")
# 4) To answer the following questions, make barplots of the Survived and Sex variables using geom_bar(). Try plotting one variable and filling by the other variable. You may want to try the default plot, then try adding position = position_dodge() to geom_bar() to make separate bars for each group.
titanic %>% ggplot(aes(Survived, colour=Sex, fill = Sex)) + geom_bar(position = "stack")
# 4) To answer the following questions, make barplots of the Survived and Sex variables using geom_bar(). Try plotting one variable and filling by the other variable. You may want to try the default plot, then try adding position = position_dodge() to geom_bar() to make separate bars for each group.
titanic %>% ggplot(aes(Survived, colour=Sex, fill = Sex)) + geom_bar(position = position_dodge())
## Most of the survivors were female.
titanic %>% ggplot(aes(Survived, colour=Sex, fill = Sex)) + geom_bar()
## Most of the survivors were female.
titanic %>% ggplot(aes(Survived)) + geom_bar()
titanic %>% ggplot(aes(Sex, colour=Survived, fill = Survived)) + geom_bar(position = position_dodge())
# 5) Make a density plot of age filled by survival status. Change the y-axis to count and set alpha = 0.2.
# Which age group is the only group more likely to survive than die?
titanic %>% ggplot(aes(Age, color = Survived)) + geom_density()
# 5) Make a density plot of age filled by survival status. Change the y-axis to count and set alpha = 0.2.
# Which age group is the only group more likely to survive than die?
titanic %>% ggplot(aes(Age, color = Survived, y = ..count..)) + geom_density()
# 5) Make a density plot of age filled by survival status. Change the y-axis to count and set alpha = 0.2.
# Which age group is the only group more likely to survive than die?
titanic %>% ggplot(aes(Age, color = Survived, fill = Survived, y = ..count..)) + geom_density()
# 5) Make a density plot of age filled by survival status. Change the y-axis to count and set alpha = 0.2.
# Which age group is the only group more likely to survive than die?
titanic %>% ggplot(aes(Age, color = Survived, fill = Survived, y = ..count..)) + geom_density(alpha = 0.2)
# Which age group is the only group more likely to survive than die?
## 0-8
# Which age group had the most deaths?
## 18-30
titanic %>% ggplot(aes(Age, color = Survived, fill = Survived)) + geom_density(alpha = 0.2)
# 5) Make a density plot of age filled by survival status. Change the y-axis to count and set alpha = 0.2.
titanic %>% ggplot(aes(Age, color = Survived, fill = Survived, y = ..count..)) + geom_density(alpha = 0.2)
# Which age group is the only group more likely to survive than die?
## 0-8
# Which age group had the most deaths?
## 18-30
titanic %>% ggplot(aes(Age, color = Survived, fill = Survived)) + geom_density(alpha = 0.2)
# 6) Filter the data to remove individuals who paid a fare of 0.
# Make a boxplot of fare grouped by survival status. Try a log2 transformation of fares.
# Add the data points with jitter and alpha blending.
# Which of the following are true?
titanic %>% filter(Fare>0)
# 6) Filter the data to remove individuals who paid a fare of 0.
# Make a boxplot of fare grouped by survival status. Try a log2 transformation of fares.
# Add the data points with jitter and alpha blending.
# Which of the following are true?
titanic %>% filter(Fare>0) %>% ggplot(aes(Fare, color = Survived)) +
geom_bar()
# 6) Filter the data to remove individuals who paid a fare of 0.
# Make a boxplot of fare grouped by survival status. Try a log2 transformation of fares.
# Add the data points with jitter and alpha blending.
# Which of the following are true?
titanic %>% filter(Fare>0) %>% ggplot(aes(Fare, color = Survived)) +
geom_line()
# 6) Filter the data to remove individuals who paid a fare of 0.
# Make a boxplot of fare grouped by survival status. Try a log2 transformation of fares.
# Add the data points with jitter and alpha blending.
# Which of the following are true?
titanic %>% filter(Fare>0) %>% ggplot(aes(Fare, color = Survived)) +
geom_line()
# 6) Filter the data to remove individuals who paid a fare of 0.
# Make a boxplot of fare grouped by survival status. Try a log2 transformation of fares.
# Add the data points with jitter and alpha blending.
# Which of the following are true?
titanic %>% filter(Fare>0) %>% ggplot(aes(Fare, color = Survived)) +
geom_density()
# 6) Filter the data to remove individuals who paid a fare of 0.
# Make a boxplot of fare grouped by survival status. Try a log2 transformation of fares.
# Add the data points with jitter and alpha blending.
# Which of the following are true?
titanic %>% filter(Fare>0) %>% ggplot(aes(Fare, color = Survived)) +
geom_density() +scale_x_continuous(trans = “log2”)
# 6) Filter the data to remove individuals who paid a fare of 0.
# Make a boxplot of fare grouped by survival status. Try a log2 transformation of fares.
# Add the data points with jitter and alpha blending.
# Which of the following are true?
titanic %>% filter(Fare>0) %>% ggplot(aes(Fare, color = Survived)) +
geom_density() + scale_x_continuous(trans = "log2")
# 6) Filter the data to remove individuals who paid a fare of 0.
# Make a boxplot of fare grouped by survival status. Try a log2 transformation of fares.
# Add the data points with jitter and alpha blending.
# Which of the following are true?
titanic %>% filter(Fare>0) %>% ggplot(aes(Fare, color = Survived)) +
geom_density() + scale_y_continuous(trans = "log2")
# 6) Filter the data to remove individuals who paid a fare of 0.
# Make a boxplot of fare grouped by survival status. Try a log2 transformation of fares.
# Add the data points with jitter and alpha blending.
# Which of the following are true?
titanic %>% filter(Fare>0) %>% ggplot(aes(Fare, color = Survived)) +
geom_density() + scale_x_continuous(trans = "log2")
## Passengers who survived generally payed higher fares than those who did not survive.
titanic %>% filter(Fare>0) %>% ggplot(aes(Fare, color = Survived))  + geom_boxplot()
## Passengers who survived generally payed higher fares than those who did not survive.
titanic %>% filter(Fare>0) %>% ggplot(aes(Fare, color = Survived))  + geom_boxplot() + scale_x_continuous(trans = "log2")
## Passengers who survived generally payed higher fares than those who did not survive.
titanic %>% filter(Fare>0) %>% ggplot(aes(Fare, color = Survived))
## Passengers who survived generally payed higher fares than those who did not survive.
titanic %>% filter(Fare>0) %>% ggplot(aes(Fare, color = Survived)) +
geom_boxplot() + scale_x_continuous(trans = "log2")
## Passengers who survived generally payed higher fares than those who did not survive.
titanic %>% filter(Fare>0) %>% ggplot(aes(Fare, color = Survived)) +
geom_boxplot() #+ scale_x_continuous(trans = "log2")
## The median fare was lower for passengers who did not survive.
## Most individuals who paid a fare around $8 did not survive.
titanic %>% filter(Fare>0) %>% ggplot(aes(Fare, color = Survived)) +
geom_boxplot()
## Passengers who survived generally payed higher fares than those who did not survive.
titanic %>% filter(Fare>0) %>% ggplot(aes(Fare, color = Survived)) +
geom_boxplot() + scale_x_continuous(trans = "log2") + geom_jitter
## Passengers who survived generally payed higher fares than those who did not survive.
titanic %>% filter(Fare>0) %>% ggplot(aes(Fare, color = Survived)) +
geom_boxplot() + scale_x_continuous(trans = "log2") + geom_jitter()
## Passengers who survived generally payed higher fares than those who did not survive.
titanic %>% filter(Fare>0) %>% ggplot(aes(Fare, color = Survived)) +
geom_boxplot() + scale_x_continuous(trans = "log2") + geom_jitter()
## Passengers who survived generally payed higher fares than those who did not survive.
titanic %>% filter(Fare>0) %>% ggplot(aes(Fare, color = Survived)) +
geom_boxplot() + geom_jitter()+ scale_x_continuous(trans = "log2")
## The median fare was lower for passengers who did not survive.
## Most individuals who paid a fare around $8 did not survive.
titanic %>% filter(Fare>0) %>% ggplot(aes(Fare, color = Survived)) +
geom_boxplot() +
geom_jitter(alpha = 0.2)
## The median fare was lower for passengers who did not survive.
## Most individuals who paid a fare around $8 did not survive.
titanic %>% filter(Fare>0) %>% ggplot(aes(Fare, color = Survived)) +
geom_boxplot() +
geom_jitter(alpha = 0.2)
## The median fare was lower for passengers who did not survive.
## Most individuals who paid a fare around $8 did not survive.
titanic %>% filter(Fare>0) %>% ggplot(aes(Fare, color = Survived)) +
geom_boxplot() +
geom_jitter()
## The median fare was lower for passengers who did not survive.
## Most individuals who paid a fare around $8 did not survive.
titanic %>%
filter(Fare > 0) %>%
ggplot(aes(Survived, Fare)) +
geom_boxplot() +
scale_y_continuous(trans = "log2") +
geom_jitter(alpha = 0.2)
# 6) Filter the data to remove individuals who paid a fare of 0.
# Make a boxplot of fare grouped by survival status. Try a log2 transformation of fares.
# Add the data points with jitter and alpha blending.
# Which of the following are true?
titanic %>% filter(Fare>0) %>% ggplot(aes(Fare, color = Survived)) +
geom_density() + scale_x_continuous(trans = "log2")
## Passengers who survived generally payed higher fares than those who did not survive.
titanic %>% filter(Fare>0) %>% ggplot(aes(Fare, color = Survived)) +
geom_boxplot() + scale_x_continuous(trans = "log2")
## The median fare was lower for passengers who did not survive.
## Most individuals who paid a fare around $8 did not survive.
titanic %>%
filter(Fare > 0) %>%
ggplot(aes(Survived, Fare)) +
geom_boxplot() +
scale_y_continuous(trans = "log2") +
geom_jitter(alpha = 0.2)
# 7) The Pclass variable corresponds to the passenger class. Make three barplots.
# For the first, make a basic barplot of passenger class filled by survival.
# For the second, make the same barplot but use the argument position = position_fill() to show relative proportions in each group instead of counts.
# For the third, make a barplot of survival filled by passenger class using position = position_fill().
titanic %>% ggplot(aes(Pclass, fill = Survived)) + geom_bar()
# For the second, make the same barplot but use the argument position = position_fill() to show relative proportions in each group instead of counts.
titanic %>% ggplot(aes(Pclass, fill = Survived)) + geom_bar(position = position_fill())
# For the third, make a barplot of survival filled by passenger class using position = position_fill().
titanic %>% ggplot(aes(Survived, fill =Pclass )) + geom_bar(position = position_fill())
# 7) The Pclass variable corresponds to the passenger class. Make three barplots.
# For the first, make a basic barplot of passenger class filled by survival.
titanic %>% ggplot(aes(Pclass, fill = Survived)) + geom_bar()
# For the second, make the same barplot but use the argument position = position_fill() to show relative proportions in each group instead of counts.
titanic %>% ggplot(aes(Pclass, fill = Survived)) + geom_bar(position = position_fill())
# For the third, make a barplot of survival filled by passenger class using position = position_fill().
titanic %>% ggplot(aes(Survived, fill =Pclass )) + geom_bar(position = position_fill())
# For the second, make the same barplot but use the argument position = position_fill() to show relative proportions in each group instead of counts.
titanic %>% ggplot(aes(Pclass, fill = Survived)) + geom_bar(position = position_fill())
# 8) Create a grid of density plots for age, filled by survival status, with count on the y-axis, faceted by sex and passenger class.
titanic %>% ggplot(aes(Age, fill = Survived, y = ..count..)) +
geom_density() +
facet_grid(Sex ~ Pclass)
# 8) Create a grid of density plots for age, filled by survival status, with count on the y-axis, faceted by sex and passenger class.
titanic %>% ggplot(aes(Age, fill = Survived, y = ..count..)) +
geom_density(alpha(0.2)) +
facet_grid(Sex ~ Pclass)
# 8) Create a grid of density plots for age, filled by survival status, with count on the y-axis, faceted by sex and passenger class.
titanic %>% ggplot(aes(Age, fill = Survived, y = ..count..)) +
geom_density(alpha(0.2)) +
facet_grid(Sex ~ Pclass)
# 8) Create a grid of density plots for age, filled by survival status, with count on the y-axis, faceted by sex and passenger class.
titanic %>% ggplot(aes(Age, fill = Survived, y = ..count..)) +
geom_density(alpha(0.2)) +
facet_grid(Sex ~ Pclass)
# 8) Create a grid of density plots for age, filled by survival status, with count on the y-axis, faceted by sex and passenger class.
titanic %>% ggplot(aes(Age, fill = Survived, y = ..count..)) +
geom_density(alpha=0.2) +
facet_grid(Sex ~ Pclass)
